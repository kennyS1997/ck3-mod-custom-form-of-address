# Scope: Title - Title whose state to update
VNTL_try_update_vanity_title = {
	# TODO: Implement or delete
}

# Upholds mod invariants on primary title change.
# Destroys the VT bound to previously used primary title,
# re-creates the VT, if there's one already bound to the new primary title.
#
# Scope: Character - Character whose primary title has changed
# NEW_PRIMARY_TITLE: Title - The NEW primary title
VNTL_on_character_primary_title_changed = {
	# Workaround for PREV.PREV
	save_temporary_scope_as = VNTL_temp_holder

	# There should only ever be 1 held VT at a time
	# but we'll use every_ in case something broke
	# due to incompatibility with other mods or something.
	every_held_title = {
		limit = {
			tier = tier_duchy
			VNTL_is_vanity_title = yes
			exists = var:VNTL_bound_primary_title
			NOT = { var:VNTL_bound_primary_title = $NEW_PRIMARY_TITLE$ }
		}

		VNTL_try_destroy_title = yes
	}

	$NEW_PRIMARY_TITLE$ = {
		# If there is an already bound and still available destroyed VT, re-create it.
		# This scenario is possible if, e.g. the player previously set up a VT
		# for their primary title, then had another title made primary
		# (at which point its VT got destroyed but remained bound),
		# and now their primary title is being changed back to the old one.
		# This logic ensures they get their original FoA back,
		# as long as their original VT is still available.
		if = {
			limit = {
				has_variable = VNTL_bound_vanity_title
			}

			var:VNTL_bound_vanity_title = {
				if = {
					limit = {
						NOT = { exists = holder }
						has_variable = VNTL_bound_primary_title
						var:VNTL_bound_primary_title = $NEW_PRIMARY_TITLE$
					}

					VNTL_give_vanity_title = {
						# Can't use PREV.PREV here, as it simply means PREV in CK3. :(
						TARGET_CHARACTER = scope:VNTL_temp_holder
						CHANGE_TYPE = created
					}
				}
			}
		}
	}

	clear_saved_scope = VNTL_temp_holder
}
